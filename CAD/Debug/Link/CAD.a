;/*
; * CAD.c
; *
; * Created: 10/04/2018 02:16:17 p. m.
; * Author: Cesar
; */
;
;#include <90usb1286.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <io.h>
;#include <stdio.h>
;#include <delay.h>
;
;int i=0,h=0,j=35;
;int comacounter = 0;
;
;
;void main(void)
; 0000 0012 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0013 char dato;
; 0000 0014 char resp;
; 0000 0015 char GPS [254];
; 0000 0016 char car;
; 0000 0017 char quotes = '"';
; 0000 0018 int pressed =0;
; 0000 0019 
; 0000 001A 
; 0000 001B 
; 0000 001C 
; 0000 001D     // USART1 initialization
; 0000 001E     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 001F     // USART1 Receiver: On
; 0000 0020     // USART1 Transmitter: On
; 0000 0021     // USART1 Mode: Asynchronous
; 0000 0022     // USART1 Baud Rate: 9600
; 0000 0023     UCSR1A=(0<<RXC1) | (0<<TXC1) | (0<<UDRE1) | (0<<FE1) | (0<<DOR1) | (0<<UPE1) | (0<<U2X1) | (0<<MPCM1);
;PCODE: $0000000E VOL: 0
;	dato -> R17
;	resp -> R16
;	GPS -> Y+0
;	car -> R19
;	quotes -> R18
;	pressed -> R20,R21
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0024     UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (1<<RXEN1) | (1<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0025     UCSR1C=(0<<UMSEL11) | (0<<UMSEL10) | (0<<UPM11) | (0<<UPM10) | (0<<USBS1) | (1<<UCSZ11) | (1<<UCSZ10) | (0<<UCPOL1);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0026     UBRR1H=0x00;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0027     UBRR1L=0x0C;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0028 
; 0000 0029 
; 0000 002A 
; 0000 002B DDRC.7=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 002C PORTC.7=1;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 002D DDRC.6=0;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 002E PORTC.6=1;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 002F DDRC.5=1;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0030 DDRC.4=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0031 
; 0000 0032 
; 0000 0033 
; 0000 0034 
; 0000 0035    printf("AT\n\r");
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0036 
; 0000 0037     //delay_ms(100);
; 0000 0038        dato =getchar();
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0039 
; 0000 003A 
; 0000 003B     while(dato != 'O')
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 003C     {
; 0000 003D 
; 0000 003E         delay_ms(100);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 003F         i++;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0040         if(i>=5)
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0041         {
; 0000 0042             break;
;PCODE: $0000003F VOL: 0
; 0000 0043         }
; 0000 0044     }
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0045 
; 0000 0046 
; 0000 0047     printf("AT+CGPSPWR=1\n\r");
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0048 
; 0000 0049    resp = getchar();
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 004A 
; 0000 004B 
; 0000 004C     while(resp != 'O')
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 004D     {
; 0000 004E         delay_ms(100);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 004F         h++;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0050         if(h>=5)
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0051         {
; 0000 0052             break;
;PCODE: $00000059 VOL: 0
; 0000 0053         }
; 0000 0054     }
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0055 
; 0000 0056     printf("AT+CGPSSTATUS?\n\r");
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0057 
; 0000 0058     delay_ms(100);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0059 
; 0000 005A     printf("AT+COPS?\n\r");
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 005B     delay_ms(100);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 005C     printf("AT+CMGF=1\n\r");
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 005D 
; 0000 005E 
; 0000 005F   PORTC.5=1;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0060 
; 0000 0061 while (1)
;PCODE: $0000007A VOL: 0
; 0000 0062     {
; 0000 0063 
; 0000 0064 
; 0000 0065 
; 0000 0066 
; 0000 0067     if(PINC.7==0 && pressed == 0)
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0068     {
; 0000 0069     delay_ms(200);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 006A     pressed = 1;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 006B 
; 0000 006C     printf("AT+CGPSINF=0\n\r");
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 006D 
; 0000 006E     while(comacounter < 4)
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 006F     {
; 0000 0070         GPS[h] = getchar();
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0071         if(GPS[h] == ',')
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0072         {
; 0000 0073          comacounter++;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0074 
; 0000 0075         }
; 0000 0076         h++;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0077 
; 0000 0078     }
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0079 
; 0000 007A      delay_ms(200);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 007B 
; 0000 007C      printf("AT+CMGS=%c4427081897%c\n\r",quotes,quotes);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 007D      delay_ms(100);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 007E      comacounter=0;
;PCODE: $000000BE VOL: 0
; 0000 007F      while(GPS[j] != 0x00)
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0080      {
; 0000 0081         car =  GPS[j];
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0082         printf("%c",car);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0083 
; 0000 0084             j++;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0085      }
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0086      delay_ms(100);
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0087      putchar(0x1A);
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0088      delay_ms(500);
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0089      PORTC.4=1;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 008A 
; 0000 008B         }
; 0000 008C 
; 0000 008D         if(PINC.6==0)
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 008E         {
; 0000 008F             pressed =0;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0090             j=0;
;PCODE: $000000E6 VOL: 0
; 0000 0091             h=0;
;PCODE: $000000E7 VOL: 0
; 0000 0092         }
; 0000 0093 
; 0000 0094 
; 0000 0095 
; 0000 0096 
; 0000 0097 }
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0098 }
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
